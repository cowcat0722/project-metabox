{{> layout/header-admin}}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
    .header-title {
        font-size: 2rem;
        font-weight: bold;
        text-align: left;
        width: 200px;
    }

    .navbar-nav-movie .nav-link.active {
        color: #ff4d4d;
        font-weight: bold;
    }

    .navbar-nav-movie .nav-link::before {
        content: '▶';
        margin-right: 5px;
    }

    .navbar-nav-movie .nav-link.active::before {
        content: '▶';
        color: #ff4d4d;
    }

    .navbar-nav-movie {
        margin-left: auto;
        display: flex;
        background-color: white;
    }

    .filter-container {
        display: flex;
        justify-content: end;
        align-items: center;
        margin-bottom: 20px;
    }

    .filter-container .form-inline select {
        margin-right: 5px;
    }

    .movie-card {
        margin-bottom: 30px;
        width: 250px;
    }

    .movie-card img {
        width: 100%;
        height: 250px;
        position: relative;
        object-fit: cover;
    }

    .movie-card .card-body {
        text-align: center;
        padding: 10px;
    }

    .movie-card .card-title {
        font-size: 1rem;
        font-weight: bold;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .movie-card .card-text {
        font-size: 0.8rem;
    }

    .movie-card .btn {
        margin-top: 10px;
        font-size: 0.8rem;
        padding: 5px 10px;
    }

    .rank {
        background-color: #ff4d4d;
        color: white;
        padding: 5px;
        margin-bottom: 10px;
        font-weight: bold;
        width: 100%;
        text-align: center;
    }

    .badge {
        margin: 2px;
        white-space: nowrap;
        width: auto;
        position: absolute;
        padding: 7px 7px;
        font-size: 1.2rem;
        border-radius: 0.75rem;
        color: white;
        text-align: center;
        line-height: 1.5rem;
    }

    .release-status {
        background-color: white;
        color: black;
        padding: 2px 6px;
        border-radius: 4px;
        display: inline-block;
        font-size: 0.8rem;
        font-family: inherit;
        border: 2px solid #6c757d;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }
</style>

<div class="container">
    <header class="d-flex justify-content-between align-items-center my-4">
        <h1 class="header-title">
            {{#isUpcoming}}상영 예정작{{/isUpcoming}}
            {{^isUpcoming}}무비차트{{/isUpcoming}}
        </h1>
        <nav class="navbar navbar-expand-lg navbar-light">
            <div class="collapse navbar-collapse">
                <div class="navbar-nav-movie ml-auto">
                    <a class="nav-link {{^isUpcoming}}active{{/isUpcoming}}" href="/movie-list">무비차트</a>
                    <a class="nav-link {{#isUpcoming}}active{{/isUpcoming}}" href="/movie-list?type=upcoming">상영예정작</a>
                </div>
            </div>
        </nav>
    </header>
    <hr>
    <div class="row justify-content-center" id="movie-list">
        {{#models}}
            <div class="col-auto movie-card">
                <div class="rank">No.{{rank}}</div>
                <div class="card">
                    <a href="/movie-detail/{{id}}">
                        <img src="/image/movie/{{imgFilename}}" class="card-img-top" alt="Movie {{id}}">
                    </a>
                    <span class="{{ageInfoColor}}">{{ageInfo}}</span>
                    <div class="card-body">
                        <h5 class="card-title">{{title}}</h5>
                        <p class="card-text">{{bookingRate}} %</p>
                        <p class="release-date">{{startDate}} <span class="release-status">{{releaseStatus}}</span></p>
                        <span><a href="/movie-edit-form/{{id}}" class="btn btn-outline-secondary">수정하기</a></span>
                        <button class="btn btn-danger deleteButton" data-movie-id="{{id}}">삭제하기</button>
                    </div>
                </div>
            </div>
        {{/models}}
    </div>
    <div class="text-center">
        <button id="load-more" class="btn btn-danger">더 보기</button>
    </div>
</div>
{{> layout/footer}}
<script>
    // 영화 삭제 요청을 서버로 보내는 함수
    function deleteMovieById(movieId) {
        return fetch(`/movie-delete/${movieId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            }
        }).then(response => response.text());
    }

    // 모든 삭제 버튼에 이벤트 리스너를 추가
    $(document).ready(function() {
        $('.deleteButton').on('click', function() {
            const movieId = $(this).data('movie-id');
            showDeleteConfirm(movieId);
        });
    });

    // SweetAlert을 사용하여 확인 및 삭제 기능을 수행하는 함수
    function showDeleteConfirm(movieId) {
        Swal.fire({
            title: "정말 삭제하시겠습니까?",
            text: "삭제를 원하면 '삭제' 버튼을 눌러주세요.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: '삭제',
            cancelButtonText: '취소',
            reverseButtons: true,
        }).then(result => {
            if (result.isConfirmed) {
                deleteMovieById(movieId).then(data => {
                    if (data === "success") {
                        Swal.fire("삭제되었습니다!", "영화가 성공적으로 삭제되었습니다.", "success").then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire("오류", "영화 삭제에 실패하였습니다.", "error");
                    }
                }).catch(error => {
                    Swal.fire("오류", "영화 삭제에 실패하였습니다.", "error");
                });
            } else {
                Swal.fire("취소되었습니다.", "삭제 요청이 취소되었습니다.", "info");
            }
        });
    }

    const isUpcoming = {{isUpcoming}}; // 서버에서 전달받은 boolean 값을 사용
    let currentPage = {{currentPage}}; // let으로 변경하여 재할당 가능하게 함
    const totalPages = {{totalPages}};

    document.getElementById('load-more').addEventListener('click', function() {
        loadMoreMovies(currentPage + 1);
    });

    function loadMoreMovies(page) {
        const type = isUpcoming ? 'upcoming' : 'all'; // isUpcoming을 사용하여 type 결정
        fetch(`/movie-list/data?type=${type}&page=${page}&size=4`) // JSON 데이터를 반환하는 새로운 엔드포인트 사용
                .then(response => response.json())
                .then(data => {
                    const movieContainer = document.getElementById('movie-list');
                    data.models.forEach(movie => {
                        const movieElement = document.createElement('div');
                        movieElement.className = 'col-auto movie-card';
                        movieElement.innerHTML = `
                        <div class="rank">No.${movie.rank}</div>
                        <div class="card">
                            <a href="/movie-detail/${movie.id}">
                                <img src="/image/movie/${movie.imgFilename}" class="card-img-top" alt="Movie ${movie.id}">
                            </a>
                            <span class="${movie.ageInfoColor}">${movie.ageInfo}</span>
                            <div class="card-body">
                                <h5 class="card-title">${movie.title}</h5>
                                <p class="card-text">${movie.bookingRate} %</p>
                                <p class="release-date">${movie.startDate} <span class="release-status">${movie.releaseStatus}</span></p>
                                <span><a href="/movie-edit-form/${movie.id}" class="btn btn-outline-secondary">수정하기</a></span>
                                <button class="btn btn-danger deleteButton" data-movie-id="${movie.id}">삭제하기</button>
                            </div>
                        </div>
                    `;
                        movieContainer.appendChild(movieElement);
                    });
                    currentPage = page;  // 현재 페이지 업데이트
                    if (currentPage + 1 >= totalPages) {
                        document.getElementById('load-more').style.display = 'none'; // 더 이상 영화가 없으면 버튼 숨기기
                    }
                    // 새로운 영화 카드에 대해 삭제 버튼 이벤트 리스너 추가
                    $('.deleteButton').off('click').on('click', function() {
                        const movieId = $(this).data('movie-id');
                        showDeleteConfirm(movieId);
                    });
                })
                .catch(error => console.error('Error:', error));
    }

    // 페이지 로드 시 처음으로 '더 보기' 버튼 숨김 여부 확인
    if (currentPage + 1 >= totalPages) {
        document.getElementById('load-more').style.display = 'none'; // 더 이상 영화가 없으면 버튼 숨기기
    }
</script>
