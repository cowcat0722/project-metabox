<script>

    // 극장 목록 업데이트 함수
    function updateTheaterSelection(theaterScrapData) {
        // theaterScrapData가 배열인지 확인합니다.
        if (!Array.isArray(theaterScrapData)) {
            console.error('Theater Scrap Data is not an array:', theaterScrapData);
            return;
        }

        // theaterScrapData에 있는 데이터를 사용하여 DOM을 업데이트합니다.
        const $grid = $('.grid');
        $grid.find('div[data-theater-name-id]').remove(); // 기존 극장 목록 제거
        theaterScrapData.forEach(theater => {
            const theaterElement = `<div style="font-size: 15px" data-theater-name-id="${theater.theaterNameId}" data-theater="${theater.name}">${theater.name}</div>`;
            $(theaterElement).insertBefore('.setting');
        });

        // 항상 div 5개 유지하게
        const maxSlots = 5;
        const currentSlots = $grid.children().length - 1; // 설정 버튼 제외
        const emptySlots = maxSlots - currentSlots;

        for (let i = 0; i < emptySlots; i++) {
            $('<div></div>').insertBefore('.setting');
        }
    }

    function checkList() {
        let userId = {{model.userDTO.id}};
        $('.selected-theater div').each(function () {
            let theaterNameId = $(this).data("theater-name-id");
            if (!myTheaterScrap.some(item => item.theaterNameId === theaterNameId)) {
                let selectList = {
                    theaterNameId: theaterNameId,
                    userId: userId
                };
                myTheaterScrap.push(selectList);
            }
        });

        $.ajax({
            url: '/mypage/home/scrap',
            data: JSON.stringify(myTheaterScrap),
            contentType: 'application/json; charset=utf-8',
            type: 'POST'
        }).done((res) => {
            alert("자주가는 META BOX 설정이 완료되었습니다.");
            closeModal();
            updateTheaterSelection(res); // 서버에서 받은 새로운 데이터를 사용하여 업데이트
        }).fail((res) => {
            alert("error!");
        });
    }

    //툴팁
    $('[data-toggle="tooltip"]').tooltip();

    // 모달창 script
    function openModal() {
        $("#myModal").css("display", "block");

        // 이미 선택된 극장을 모달의 selected-theater에 추가
        $(".theater-select div[data-theater-name-id]").each(function () {
            const theaterName = $(this).data("theater");
            const theaterNameId = $(this).data("theater-name-id");
            $(`.theater-list-name div[data-theater="${theaterName}"]`).css('background-color', '#c6c6c6');
            const selectedTheater = $(`
                <div data-theater="${theaterName}" data-theater-name-id="${theaterNameId}">
                    ${theaterName}
                    <button class="delete-button">&times;</button>
                </div>
            `);
            selectedTheater.find('.delete-button').on('click', function () {
                const parentDiv = $(this).parent();
                const theaterName = parentDiv.data('theater');
                $(`.theater-list-name div[data-theater="${theaterName}"]`).css('background-color', '');
                myTheaterScrap = myTheaterScrap.filter(item => item.theaterNameId !== parentDiv.data('theater-name-id'));
                parentDiv.remove();
            });
            $('.selected-theater').append(selectedTheater);
        });
    }

    function closeModal() {
        $("#myModal").css("display", "none");
        $('.selected-theater').empty(); // 모달 닫을 때 선택된 극장 목록 초기화
    }

    // area 거는 것
    $('.theater-area-list').on('click', '.tab-button', function () {
        let id = $(this).data('theater-id');
        $('.area-name-list').removeClass('active');
        $('#area-name-list-' + id).addClass('active');
    });

    // 최대 5개. 중복체크도 필요함
    const maxSelectedTheaters = 5;

    // MEATABOX 강남 거는 것
    $('.theater-list-name div').on('click', function () {
        $(this).css({
            'background-color': '#c6c6c6',
        });

        const theaterName = $(this).data('theater');

        let isSelected = false;
        $('.selected-theater div').each(function () {
            const textNode = $(this).contents().filter(function () {
                return this.nodeType === 3;
            }).text().trim();

            if (textNode === theaterName) {
                isSelected = true;
                return false;
            }
        });

        if (isSelected) {
            return;
        }

        if ($('.selected-theater div').length >= maxSelectedTheaters) {
            alert('최대 5개의 극장만 선택할 수 있습니다.');
            return;
        }

        let theaterNameIds = $(this).data("theater-name-id");

        const selectedTheater = $(`
            <div data-theater="${theaterName}" data-theater-name-id="${theaterNameIds}">
                ${theaterName}
                <button class="delete-button">&times;</button>
            </div>
        `);

        selectedTheater.find('.delete-button').on('click', function () {
            const parentDiv = $(this).parent();
            const theaterName = parentDiv.data('theater');
            $(`.theater-list-name div[data-theater="${theaterName}"]`).css({
                'background-color': '',
            });
            myTheaterScrap = myTheaterScrap.filter(item => item.theaterNameId !== parentDiv.data('theater-name-id'));
            $(this).parent().remove();
        });

        $('.selected-theater').append(selectedTheater);
    });

    // 천단위 표시 재사용 해야할 함수
    function numberWithCommas(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    // 처음에 들어갔을때 천단위 구분자 나오게
    $(".point-price").each(function () {
        let pointPrice = $(this).text();
        $(this).text(numberWithCommas(pointPrice));
    });

</script>
