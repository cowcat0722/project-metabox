{{> layout/header}}

<style>
    body {
        background-color: #ffffff;
    }

    .container-book {
        margin-top: 50px;
        max-width: 1200px;
    }

    .list-box, .info-box, .notice-box {
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .list-container {
        display: flex;
        justify-content: center;
        flex-wrap: nowrap;
        margin-bottom: 20px;
    }

    .list-group {
        margin: 0;
        border-right: 1px solid #ddd;
        flex: 1;
        min-width: 250px;
        text-align: center;
        background-color: #f0f0f0; /* 리스트 배경을 회색으로 변경 */
        color: black;
    }

    .list-group-item {
        cursor: pointer;
        color: black;
        padding: 10px 0; /* 높이를 글자에 맞게 조정 */
    }

    .list-group-item.active {
        background-color: #c8c8e0;
        color: black;
    }

    .list-title {
        font-size: 18px;
        font-weight: bold;
        padding: 10px;
        border-bottom: 1px solid #ddd;
        background-color: #4E0929; /* 리스트 제목 배경을 버건디 색상으로 변경 */
        color: white;
        text-align: center;
    }

    .schedule-table {
        margin-top: 10px;
    }

    .schedule-table td {
        padding: 5px;
    }

    .list-group-item.selected {
        border: 1px solid red;
        color: red;
    }

    .info-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        flex-wrap: wrap;
    }

    .info-box {
        border: 1px solid #000;
        padding: 10px;
        margin: 0 10px;
        text-align: left;
        flex: 1;
        min-height: 150px;
        position: relative;
    }

    .date-button {
        flex: 1;
        margin: 0;
        border: 1px solid #ddd;
        border-radius: 0;
        text-align: center;
    }

    .info-bar {
        background-color: #1c1c1c;
        color: white;
        padding: 5px 0; /* 패딩을 줄여서 세로 크기 조정 */
        position: fixed;
        bottom: 0;
        width: 100%;
        z-index: 1000; /* 높여서 info-bar가 푸터 위에 오도록 설정 */
    }

    .info-bar .container-book {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .info-bar .movie-info {
        display: flex;
        align-items: center;
    }

    .info-bar .movie-info img {
        width: 50px;
        height: 75px;
        margin-right: 15px;
    }

    .info-bar .movie-info .details {
        display: flex;
        flex-direction: column;
    }

    .info-bar .movie-info .details span {
        margin-bottom: 5px;
    }

    .info-bar .btn-nav {
        background-color: #333;
        color: white;
        border: none;
        padding: 5px 10px; /* 패딩을 줄여서 버튼 크기 조정 */
        border-radius: 5px;
    }

    .info-bar .btn-nav:hover {
        background-color: #555;
    }

    @media (max-width: 992px) {
        .list-container {
            flex-direction: column;
        }

        .list-group {
            border-right: none;
            border-bottom: 1px solid #ddd;
        }
    }

    @media (max-width: 576px) {
        .list-group {
            min-width: 100%;
            border-bottom: none;
        }
    }


</style>
<style>

    .container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);

    }

    .section {
        border: 1px solid #ddd;
        padding: 10px;
    }

    h2 {
        margin-top: 0;
        padding-bottom: 2px;
        border-bottom: #4b1b3a 1px solid;
    }

    button {
        display: block;
        width: 100%;
        margin-bottom: 10px;
        padding: 10px;
        background-color: #f0f0f0;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    button.selected {
        background-color: #4E0929;
        color: white;
    }
</style>

<div class="container my-5">
    <div class="grid">
        <div class="section" id="regionSection">
            <h2>지역</h2>
            <!-- 지역 버튼들이 여기에 동적으로 추가됩니다 -->
        </div>
        <div class="section" id="theaterSection">
            <h2>극장</h2>
            <!-- 극장 버튼들이 여기에 동적으로 추가됩니다 -->
        </div>
        <div class="section" id="movieSection">
            <h2>영화</h2>
            <!-- 영화 버튼들이 여기에 동적으로 추가됩니다 -->
        </div>
        <div class="section" id="timeSection">
            <h2>상영 시간</h2>
            <!-- 상영 시간들이 여기에 동적으로 추가됩니다 -->
        </div>
    </div>
</div>

<script>
    const movieData = {
        '서울': {
            'METABOX 강남': {
                '인사이드아웃2': ['16:00'],
            },
            'METABOX 강남': {
                '인사이드아웃2': ['16:00'],
            },
        },
        '경기': {
            '강변': {
                '하이재킹': ['10:00'],
            },
        },
        '인천': {
            '김대일구': {
                '북극곰북극곰의모난원': ['12:00'],
            },
        },
        '강원': {
            '구로': {
                '챔피언키즈:프리킥의달인': ['14:00'],
            },
        },
        '대전/충청': {
            '대학로': {
                '드라이브': ['16:00'],
            },
        },
        '대구': {
            '동대문': {
                '갯머슴': ['18:00'],
            },
        },
        '부산/울산': {
            '동춘': {
                '타로': ['20:00'],
            },
        },
        '경상': {
            '명동': {
                '존노브인터체스트': ['22:00'],
            },
        },
        '광주/전라/제주': {
            '명동': {
                '존노브인터체스트': ['22:00'],
            },
        },
    };

    let selectedRegion, selectedTheater, selectedMovie;

    function createButton(text, onClick) {
        const button = document.createElement('button');
        button.textContent = text;
        button.onclick = onClick;
        return button;
    }

    function updateSection(sectionId, items, onItemClick) {
        const section = document.getElementById(sectionId);
        section.innerHTML = `<h2>${section.querySelector('h2').textContent}</h2>`;
        items.forEach(item => {
            const button = createButton(item, () => onItemClick(item));
            section.appendChild(button);
        });
    }

    function selectRegion(region) {
        selectedRegion = region;
        selectedTheater = null;
        selectedMovie = null;
        updateSection('regionSection', Object.keys(movieData), selectRegion);
        updateSection('theaterSection', Object.keys(movieData[region]), selectTheater);
        updateSection('movieSection', [], () => {
        });
        updateSection('timeSection', [], () => {
        });
        selectButton('regionSection', region);
    }

    function selectTheater(theater) {
        selectedTheater = theater;
        selectedMovie = null;
        updateSection('theaterSection', Object.keys(movieData[selectedRegion]), selectTheater);
        updateSection('movieSection', Object.keys(movieData[selectedRegion][theater]), selectMovie);
        updateSection('timeSection', [], () => {
        });
        selectButton('theaterSection', theater);
    }

    function selectMovie(movie) {
        selectedMovie = movie;
        updateSection('movieSection', Object.keys(movieData[selectedRegion][selectedTheater]), selectMovie);
        updateSection('timeSection', movieData[selectedRegion][selectedTheater][movie], () => {
        });
        selectButton('movieSection', movie);
    }

    function selectButton(sectionId, text) {
        const buttons = document.querySelectorAll(`#${sectionId} button`);
        buttons.forEach(button => {
            if (button.textContent === text) {
                button.classList.add('selected');
            } else {
                button.classList.remove('selected');
            }
        });
    }

    // 초기 지역 목록 표시
    updateSection('regionSection', Object.keys(movieData), selectRegion);
</script>
{{> layout/footer}}